!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHITECTURE_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	203;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
ARCHITECTURE_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/home\/music\/workspace\/genfit\/test\/CometPhase1$/;"	m
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_EDIT_COMMAND	Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/home\/music\/workspace\/genfit\/test\/CometPhase1$/;"	m
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	55;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	63;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	86;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	48;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	9;"	d	file:
Class	myDict.cxx	/^TClass *PointHit::Class()$/;"	f	class:PointHit	signature:()
Class	myDict.cxx	/^TClass *StripHit::Class()$/;"	f	class:StripHit	signature:()
Class_Name	myDict.cxx	/^const char *PointHit::Class_Name()$/;"	f	class:PointHit	signature:()
Class_Name	myDict.cxx	/^const char *StripHit::Class_Name()$/;"	f	class:StripHit	signature:()
Cut	pulls.h	/^   virtual Int_t    Cut(Long64_t entry);$/;"	p	class:pulls	access:public	signature:(Long64_t entry)
Cut	pulls.h	/^Int_t pulls::Cut(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
Dictionary	myDict.cxx	/^void PointHit::Dictionary()$/;"	f	class:PointHit	signature:()
Dictionary	myDict.cxx	/^void StripHit::Dictionary()$/;"	f	class:StripHit	signature:()
G__ANSIHEADER	myDict.h	15;"	d
G__DICTIONARY	myDict.h	16;"	d
G__PRIVATE_GVALUE	myDict.h	17;"	d
G__ROOT	myDict.cxx	25;"	d	file:
G__Sizep2memfuncmyDict	myDict.cxx	/^  G__Sizep2memfuncmyDict(): p(&G__Sizep2memfuncmyDict::sizep2memfunc) {}$/;"	f	class:G__Sizep2memfuncmyDict	access:public	signature:()
G__Sizep2memfuncmyDict	myDict.cxx	/^class G__Sizep2memfuncmyDict {$/;"	c	file:
G__Sizep2memfuncmyDict::G__Sizep2memfuncmyDict	myDict.cxx	/^  G__Sizep2memfuncmyDict(): p(&G__Sizep2memfuncmyDict::sizep2memfunc) {}$/;"	f	class:G__Sizep2memfuncmyDict	access:public	signature:()
G__Sizep2memfuncmyDict::p	myDict.cxx	/^    size_t (G__Sizep2memfuncmyDict::*p)();$/;"	m	class:G__Sizep2memfuncmyDict	file:	access:private
G__Sizep2memfuncmyDict::sizep2memfunc	myDict.cxx	/^    size_t sizep2memfunc() { return(sizeof(p)); }$/;"	f	class:G__Sizep2memfuncmyDict	access:public	signature:()
G__TPointHit	myDict.cxx	/^typedef PointHit G__TPointHit;$/;"	t	file:
G__TStripHit	myDict.cxx	/^typedef StripHit G__TStripHit;$/;"	t	file:
G__cpp_dllrevmyDict	myDict.cxx	/^extern "C" int G__cpp_dllrevmyDict() { return(30051515); }$/;"	f	signature:()
G__cpp_reset_tagtablemyDict	myDict.cxx	/^extern "C" void G__cpp_reset_tagtablemyDict() {$/;"	f	signature:()
G__cpp_reset_tagtablemyDict	myDict.cxx	/^extern "C" void G__cpp_reset_tagtablemyDict();$/;"	p	file:	signature:()
G__cpp_setup_func0	myDict.cxx	/^static void G__cpp_setup_func0() {$/;"	f	file:	signature:()
G__cpp_setup_func1	myDict.cxx	/^static void G__cpp_setup_func1() {$/;"	f	file:	signature:()
G__cpp_setup_func10	myDict.cxx	/^static void G__cpp_setup_func10() {$/;"	f	file:	signature:()
G__cpp_setup_func11	myDict.cxx	/^static void G__cpp_setup_func11() {$/;"	f	file:	signature:()
G__cpp_setup_func12	myDict.cxx	/^static void G__cpp_setup_func12() {$/;"	f	file:	signature:()
G__cpp_setup_func13	myDict.cxx	/^static void G__cpp_setup_func13() {$/;"	f	file:	signature:()
G__cpp_setup_func14	myDict.cxx	/^static void G__cpp_setup_func14() {$/;"	f	file:	signature:()
G__cpp_setup_func15	myDict.cxx	/^static void G__cpp_setup_func15() {$/;"	f	file:	signature:()
G__cpp_setup_func16	myDict.cxx	/^static void G__cpp_setup_func16() {$/;"	f	file:	signature:()
G__cpp_setup_func2	myDict.cxx	/^static void G__cpp_setup_func2() {$/;"	f	file:	signature:()
G__cpp_setup_func3	myDict.cxx	/^static void G__cpp_setup_func3() {$/;"	f	file:	signature:()
G__cpp_setup_func4	myDict.cxx	/^static void G__cpp_setup_func4() {$/;"	f	file:	signature:()
G__cpp_setup_func5	myDict.cxx	/^static void G__cpp_setup_func5() {$/;"	f	file:	signature:()
G__cpp_setup_func6	myDict.cxx	/^static void G__cpp_setup_func6() {$/;"	f	file:	signature:()
G__cpp_setup_func7	myDict.cxx	/^static void G__cpp_setup_func7() {$/;"	f	file:	signature:()
G__cpp_setup_func8	myDict.cxx	/^static void G__cpp_setup_func8() {$/;"	f	file:	signature:()
G__cpp_setup_func9	myDict.cxx	/^static void G__cpp_setup_func9() {$/;"	f	file:	signature:()
G__cpp_setup_funcmyDict	myDict.cxx	/^extern "C" void G__cpp_setup_funcmyDict() {$/;"	f	signature:()
G__cpp_setup_funcmyDict	myDict.h	/^extern void G__cpp_setup_funcmyDict();$/;"	p	signature:()
G__cpp_setup_global0	myDict.cxx	/^static void G__cpp_setup_global0() {$/;"	f	file:	signature:()
G__cpp_setup_global1	myDict.cxx	/^static void G__cpp_setup_global1() {$/;"	f	file:	signature:()
G__cpp_setup_global2	myDict.cxx	/^static void G__cpp_setup_global2() {$/;"	f	file:	signature:()
G__cpp_setup_globalmyDict	myDict.cxx	/^extern "C" void G__cpp_setup_globalmyDict() {$/;"	f	signature:()
G__cpp_setup_globalmyDict	myDict.h	/^extern void G__cpp_setup_globalmyDict();$/;"	p	signature:()
G__cpp_setup_inheritancemyDict	myDict.cxx	/^extern "C" void G__cpp_setup_inheritancemyDict() {$/;"	f	signature:()
G__cpp_setup_inheritancemyDict	myDict.h	/^extern void G__cpp_setup_inheritancemyDict();$/;"	p	signature:()
G__cpp_setup_initializermyDict	myDict.cxx	/^G__cpp_setup_initmyDict G__cpp_setup_initializermyDict;$/;"	v
G__cpp_setup_initmyDict	myDict.cxx	/^    G__cpp_setup_initmyDict() { G__add_setup_func("myDict",(G__incsetup)(&G__cpp_setupmyDict)); G__call_setup_funcs(); }$/;"	f	class:G__cpp_setup_initmyDict	access:public	signature:()
G__cpp_setup_initmyDict	myDict.cxx	/^class G__cpp_setup_initmyDict {$/;"	c	file:
G__cpp_setup_initmyDict::G__cpp_setup_initmyDict	myDict.cxx	/^    G__cpp_setup_initmyDict() { G__add_setup_func("myDict",(G__incsetup)(&G__cpp_setupmyDict)); G__call_setup_funcs(); }$/;"	f	class:G__cpp_setup_initmyDict	access:public	signature:()
G__cpp_setup_initmyDict::~G__cpp_setup_initmyDict	myDict.cxx	/^   ~G__cpp_setup_initmyDict() { G__remove_setup_func("myDict"); }$/;"	f	class:G__cpp_setup_initmyDict	access:public	signature:()
G__cpp_setup_memfuncmyDict	myDict.cxx	/^extern "C" void G__cpp_setup_memfuncmyDict() {$/;"	f	signature:()
G__cpp_setup_memfuncmyDict	myDict.h	/^extern void G__cpp_setup_memfuncmyDict();$/;"	p	signature:()
G__cpp_setup_memvarmyDict	myDict.cxx	/^extern "C" void G__cpp_setup_memvarmyDict() {$/;"	f	signature:()
G__cpp_setup_memvarmyDict	myDict.h	/^extern void G__cpp_setup_memvarmyDict();$/;"	p	signature:()
G__cpp_setup_tagtablemyDict	myDict.cxx	/^extern "C" void G__cpp_setup_tagtablemyDict() {$/;"	f	signature:()
G__cpp_setup_tagtablemyDict	myDict.h	/^extern void G__cpp_setup_tagtablemyDict();$/;"	p	signature:()
G__cpp_setup_typetablemyDict	myDict.cxx	/^extern "C" void G__cpp_setup_typetablemyDict() {$/;"	f	signature:()
G__cpp_setup_typetablemyDict	myDict.h	/^extern void G__cpp_setup_typetablemyDict();$/;"	p	signature:()
G__cpp_setupmyDict	myDict.cxx	/^extern "C" void G__cpp_setupmyDict(void) {$/;"	f	signature:(void)
G__get_sizep2memfuncmyDict	myDict.cxx	/^size_t G__get_sizep2memfuncmyDict()$/;"	f	signature:()
G__myDictLN_GFAbsRecoHit	myDict.cxx	/^G__linked_taginfo G__myDictLN_GFAbsRecoHit = { "GFAbsRecoHit" , 99 , -1 };$/;"	v
G__myDictLN_GFAbsTrackRep	myDict.cxx	/^G__linked_taginfo G__myDictLN_GFAbsTrackRep = { "GFAbsTrackRep" , 99 , -1 };$/;"	v
G__myDictLN_GFRecoHitIfclEGFPlanarHitPolicygR	myDict.cxx	/^G__linked_taginfo G__myDictLN_GFRecoHitIfclEGFPlanarHitPolicygR = { "GFRecoHitIfc<GFPlanarHitPolicy>" , 99 , -1 };$/;"	v
G__myDictLN_GFRecoHitIfclEGFSpacepointHitPolicygR	myDict.cxx	/^G__linked_taginfo G__myDictLN_GFRecoHitIfclEGFSpacepointHitPolicygR = { "GFRecoHitIfc<GFSpacepointHitPolicy>" , 99 , -1 };$/;"	v
G__myDictLN_PointHit	myDict.cxx	/^G__linked_taginfo G__myDictLN_PointHit = { "PointHit" , 99 , -1 };$/;"	v
G__myDictLN_StripHit	myDict.cxx	/^G__linked_taginfo G__myDictLN_StripHit = { "StripHit" , 99 , -1 };$/;"	v
G__myDictLN_TBuffer	myDict.cxx	/^G__linked_taginfo G__myDictLN_TBuffer = { "TBuffer" , 99 , -1 };$/;"	v
G__myDictLN_TClass	myDict.cxx	/^G__linked_taginfo G__myDictLN_TClass = { "TClass" , 99 , -1 };$/;"	v
G__myDictLN_TElementActionTlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };$/;"	v
G__myDictLN_TElementPosActionTlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTBaselEdoublegR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTBaselEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTColumn_constlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTColumnlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTDiag_constlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTDiaglEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTFlat_constlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTFlatlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTRow_constlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTRowlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTSparseDiag_constlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTSparseDiaglEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTSparseRow_constlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTSparseRowlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTSub_constlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTSublEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTlEdoublegR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };$/;"	v
G__myDictLN_TMatrixTlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };$/;"	v
G__myDictLN_TMemberInspector	myDict.cxx	/^G__linked_taginfo G__myDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };$/;"	v
G__myDictLN_TObject	myDict.cxx	/^G__linked_taginfo G__myDictLN_TObject = { "TObject" , 99 , -1 };$/;"	v
G__myDictLN_TVector3	myDict.cxx	/^G__linked_taginfo G__myDictLN_TVector3 = { "TVector3" , 99 , -1 };$/;"	v
G__myDictLN_TVectorTlEdoublegR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };$/;"	v
G__myDictLN_TVectorTlEfloatgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };$/;"	v
G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };$/;"	v
G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };$/;"	v
G__myDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };$/;"	v
G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };$/;"	v
G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR	myDict.cxx	/^G__linked_taginfo G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };$/;"	v
G__myDict_266_0_1	myDict.cxx	/^static int G__myDict_266_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_12	myDict.cxx	/^static int G__myDict_266_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_13	myDict.cxx	/^static int G__myDict_266_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_14	myDict.cxx	/^static int G__myDict_266_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_15	myDict.cxx	/^static int G__myDict_266_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_16	myDict.cxx	/^static int G__myDict_266_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_17	myDict.cxx	/^static int G__myDict_266_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_18	myDict.cxx	/^static int G__myDict_266_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_19	myDict.cxx	/^static int G__myDict_266_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_2	myDict.cxx	/^static int G__myDict_266_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_5	myDict.cxx	/^static int G__myDict_266_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_6	myDict.cxx	/^static int G__myDict_266_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_7	myDict.cxx	/^static int G__myDict_266_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_266_0_8	myDict.cxx	/^static int G__myDict_266_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_1	myDict.cxx	/^static int G__myDict_269_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_12	myDict.cxx	/^static int G__myDict_269_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_13	myDict.cxx	/^static int G__myDict_269_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_14	myDict.cxx	/^static int G__myDict_269_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_15	myDict.cxx	/^static int G__myDict_269_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_16	myDict.cxx	/^static int G__myDict_269_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_17	myDict.cxx	/^static int G__myDict_269_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_18	myDict.cxx	/^static int G__myDict_269_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_19	myDict.cxx	/^static int G__myDict_269_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_2	myDict.cxx	/^static int G__myDict_269_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_5	myDict.cxx	/^static int G__myDict_269_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_6	myDict.cxx	/^static int G__myDict_269_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_7	myDict.cxx	/^static int G__myDict_269_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__myDict_269_0_8	myDict.cxx	/^static int G__myDict_269_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)$/;"	f	file:	signature:(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
G__set_cpp_environmentmyDict	myDict.cxx	/^extern "C" void G__set_cpp_environmentmyDict() {$/;"	f	signature:()
G__set_cpp_environmentmyDict	myDict.h	/^extern void G__set_cpp_environmentmyDict();$/;"	p	signature:()
G__setup_memfuncPointHit	myDict.cxx	/^static void G__setup_memfuncPointHit(void) {$/;"	f	file:	signature:(void)
G__setup_memfuncStripHit	myDict.cxx	/^static void G__setup_memfuncStripHit(void) {$/;"	f	file:	signature:(void)
G__setup_memvarPointHit	myDict.cxx	/^static void G__setup_memvarPointHit(void) {$/;"	f	file:	signature:(void)
G__setup_memvarStripHit	myDict.cxx	/^static void G__setup_memvarStripHit(void) {$/;"	f	file:	signature:(void)
Geane	config/Geane.C	/^void Geane()$/;"	f	signature:()
Geane_gaus_scat	config/Geane_gaus_scat.C	/^void Geane_gaus_scat()$/;"	f	signature:()
Geane_gaus_scat	config/Geane_noEloss.C	/^void Geane_gaus_scat()$/;"	f	signature:()
GenerateInitInstance	myDict.cxx	/^   TGenericClassInfo *GenerateInitInstance(const ::PointHit*)$/;"	f	namespace:ROOT	signature:(const ::PointHit*)
GenerateInitInstance	myDict.cxx	/^   TGenericClassInfo *GenerateInitInstance(const ::StripHit*)$/;"	f	namespace:ROOT	signature:(const ::StripHit*)
GenerateInitInstanceLocal	myDict.cxx	/^   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PointHit*)$/;"	f	namespace:ROOT	signature:(const ::PointHit*)
GenerateInitInstanceLocal	myDict.cxx	/^   static TGenericClassInfo *GenerateInitInstanceLocal(const ::StripHit*)$/;"	f	namespace:ROOT	signature:(const ::StripHit*)
GetEntry	pulls.h	/^   virtual Int_t    GetEntry(Long64_t entry);$/;"	p	class:pulls	access:public	signature:(Long64_t entry)
GetEntry	pulls.h	/^Int_t pulls::GetEntry(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
ID_VOID_MAIN	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
ImplFileLine	myDict.cxx	/^int PointHit::ImplFileLine()$/;"	f	class:PointHit	signature:()
ImplFileLine	myDict.cxx	/^int StripHit::ImplFileLine()$/;"	f	class:StripHit	signature:()
ImplFileName	myDict.cxx	/^const char *PointHit::ImplFileName()$/;"	f	class:PointHit	signature:()
ImplFileName	myDict.cxx	/^const char *StripHit::ImplFileName()$/;"	f	class:StripHit	signature:()
Init	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PointHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	m	namespace:ROOT	file:
Init	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StripHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	m	namespace:ROOT	file:
Init	pulls.h	/^   virtual void     Init(TTree *tree);$/;"	p	class:pulls	access:public	signature:(TTree *tree)
Init	pulls.h	/^void pulls::Init(TTree *tree)$/;"	f	class:pulls	signature:(TTree *tree)
LoadTree	pulls.h	/^   virtual Long64_t LoadTree(Long64_t entry);$/;"	p	class:pulls	access:public	signature:(Long64_t entry)
LoadTree	pulls.h	/^Long64_t pulls::LoadTree(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
Loop	pulls.h	/^   virtual void     Loop(TString pdfName);$/;"	p	class:pulls	access:public	signature:(TString pdfName)
MAX_HIT	main.cxx	110;"	d	file:
Notify	pulls.h	/^   virtual Bool_t   Notify();$/;"	p	class:pulls	access:public	signature:()
Notify	pulls.h	/^Bool_t pulls::Notify()$/;"	f	class:pulls	signature:()
NparHitRep	PointHit.h	/^  static const int NparHitRep = 3;$/;"	m	class:PointHit	access:private
NparHitRep	StripHit.h	/^  static const int NparHitRep = 1;$/;"	m	class:StripHit	access:private
PDGcode	main.cxx	/^int PDGcode = 11; \/\/ e-$/;"	v
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	92;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	d	file:
PLATFORM_ID	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
POINTHIT_HH	PointHit.h	2;"	d
PlanarRecoHit	StripHit.h	/^typedef GFRecoHitIfc<GFPlanarHitPolicy> PlanarRecoHit;$/;"	t
PointHit	PointHit.cxx	/^PointHit::PointHit()$/;"	f	class:PointHit	signature:()
PointHit	PointHit.cxx	/^PointHit::PointHit(TVector3 point,double resXY, double resZ)$/;"	f	class:PointHit	signature:(TVector3 point,double resXY, double resZ)
PointHit	PointHit.h	/^  PointHit();$/;"	p	class:PointHit	access:public	signature:()
PointHit	PointHit.h	/^  PointHit(TVector3 point,double resXY, double resZ);$/;"	p	class:PointHit	access:public	signature:(TVector3 point,double resXY, double resZ)
PointHit	PointHit.h	/^class PointHit : public SpacepointRecoHit {$/;"	c	inherits:SpacepointRecoHit
PointHit::Class	myDict.cxx	/^TClass *PointHit::Class()$/;"	f	class:PointHit	signature:()
PointHit::Class_Name	myDict.cxx	/^const char *PointHit::Class_Name()$/;"	f	class:PointHit	signature:()
PointHit::Dictionary	myDict.cxx	/^void PointHit::Dictionary()$/;"	f	class:PointHit	signature:()
PointHit::ImplFileLine	myDict.cxx	/^int PointHit::ImplFileLine()$/;"	f	class:PointHit	signature:()
PointHit::ImplFileName	myDict.cxx	/^const char *PointHit::ImplFileName()$/;"	f	class:PointHit	signature:()
PointHit::NparHitRep	PointHit.h	/^  static const int NparHitRep = 3;$/;"	m	class:PointHit	access:private
PointHit::PointHit	PointHit.cxx	/^PointHit::PointHit()$/;"	f	class:PointHit	signature:()
PointHit::PointHit	PointHit.cxx	/^PointHit::PointHit(TVector3 point,double resXY, double resZ)$/;"	f	class:PointHit	signature:(TVector3 point,double resXY, double resZ)
PointHit::PointHit	PointHit.h	/^  PointHit();$/;"	p	class:PointHit	access:public	signature:()
PointHit::PointHit	PointHit.h	/^  PointHit(TVector3 point,double resXY, double resZ);$/;"	p	class:PointHit	access:public	signature:(TVector3 point,double resXY, double resZ)
PointHit::ShowMembers	myDict.cxx	/^void PointHit::ShowMembers(TMemberInspector &R__insp)$/;"	f	class:PointHit	signature:(TMemberInspector &R__insp)
PointHit::Streamer	myDict.cxx	/^void PointHit::Streamer(TBuffer &R__b)$/;"	f	class:PointHit	signature:(TBuffer &R__b)
PointHit::clone	PointHit.cxx	/^PointHit::clone(){$/;"	f	class:PointHit	signature:()
PointHit::clone	PointHit.h	/^  virtual GFAbsRecoHit* clone();$/;"	p	class:PointHit	access:public	signature:()
PointHit::fgIsA	myDict.cxx	/^TClass *PointHit::fgIsA = 0;  \/\/ static to hold class pointer$/;"	m	class:PointHit	file:
PointHit::getHMatrix	PointHit.cxx	/^PointHit::getHMatrix(const GFAbsTrackRep* stateVector)$/;"	f	class:PointHit	signature:(const GFAbsTrackRep* stateVector)
PointHit::getHMatrix	PointHit.h	/^  virtual TMatrixT<double> getHMatrix(const GFAbsTrackRep* stateVector);$/;"	p	class:PointHit	access:public	signature:(const GFAbsTrackRep* stateVector)
PointHit::~PointHit	PointHit.cxx	/^PointHit::~PointHit()$/;"	f	class:PointHit	signature:()
PointHit::~PointHit	PointHit.h	/^  virtual ~PointHit();$/;"	p	class:PointHit	access:public	signature:()
PointHit_ShowMembers	myDict.cxx	/^   void PointHit_ShowMembers(void *obj, TMemberInspector &R__insp);$/;"	p	namespace:ROOT	file:	signature:(void *obj, TMemberInspector &R__insp)
RM	Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
ROOT	myDict.cxx	/^namespace ROOT {$/;"	n	file:
ROOT::GenerateInitInstance	myDict.cxx	/^   TGenericClassInfo *GenerateInitInstance(const ::PointHit*)$/;"	f	namespace:ROOT	signature:(const ::PointHit*)
ROOT::GenerateInitInstance	myDict.cxx	/^   TGenericClassInfo *GenerateInitInstance(const ::StripHit*)$/;"	f	namespace:ROOT	signature:(const ::StripHit*)
ROOT::GenerateInitInstanceLocal	myDict.cxx	/^   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PointHit*)$/;"	f	namespace:ROOT	signature:(const ::PointHit*)
ROOT::GenerateInitInstanceLocal	myDict.cxx	/^   static TGenericClassInfo *GenerateInitInstanceLocal(const ::StripHit*)$/;"	f	namespace:ROOT	signature:(const ::StripHit*)
ROOT::Init	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PointHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	m	namespace:ROOT	file:
ROOT::Init	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StripHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	m	namespace:ROOT	file:
ROOT::PointHit_ShowMembers	myDict.cxx	/^   void PointHit_ShowMembers(void *obj, TMemberInspector &R__insp);$/;"	p	namespace:ROOT	file:	signature:(void *obj, TMemberInspector &R__insp)
ROOT::Shadow	myDict.cxx	/^   namespace Shadow {$/;"	n	namespace:ROOT	file:
ROOT::StripHit_ShowMembers	myDict.cxx	/^   void StripHit_ShowMembers(void *obj, TMemberInspector &R__insp);$/;"	p	namespace:ROOT	file:	signature:(void *obj, TMemberInspector &R__insp)
ROOT::_R__UNIQUE_	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PointHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	p	namespace:ROOT	file:	signature:(Init)
ROOT::_R__UNIQUE_	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StripHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	p	namespace:ROOT	file:	signature:(Init)
ROOT::deleteArray_PointHit	myDict.cxx	/^   static void deleteArray_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
ROOT::deleteArray_PointHit	myDict.cxx	/^   static void deleteArray_PointHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
ROOT::deleteArray_StripHit	myDict.cxx	/^   static void deleteArray_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
ROOT::deleteArray_StripHit	myDict.cxx	/^   static void deleteArray_StripHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
ROOT::delete_PointHit	myDict.cxx	/^   static void delete_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
ROOT::delete_PointHit	myDict.cxx	/^   static void delete_PointHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
ROOT::delete_StripHit	myDict.cxx	/^   static void delete_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
ROOT::delete_StripHit	myDict.cxx	/^   static void delete_StripHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
ROOT::destruct_PointHit	myDict.cxx	/^   static void destruct_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
ROOT::destruct_PointHit	myDict.cxx	/^   static void destruct_PointHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
ROOT::destruct_StripHit	myDict.cxx	/^   static void destruct_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
ROOT::destruct_StripHit	myDict.cxx	/^   static void destruct_StripHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
ROOT::newArray_PointHit	myDict.cxx	/^   static void *newArray_PointHit(Long_t nElements, void *p) {$/;"	f	namespace:ROOT	signature:(Long_t nElements, void *p)
ROOT::newArray_PointHit	myDict.cxx	/^   static void *newArray_PointHit(Long_t size, void *p);$/;"	p	namespace:ROOT	file:	signature:(Long_t size, void *p)
ROOT::newArray_StripHit	myDict.cxx	/^   static void *newArray_StripHit(Long_t nElements, void *p) {$/;"	f	namespace:ROOT	signature:(Long_t nElements, void *p)
ROOT::newArray_StripHit	myDict.cxx	/^   static void *newArray_StripHit(Long_t size, void *p);$/;"	p	namespace:ROOT	file:	signature:(Long_t size, void *p)
ROOT::new_PointHit	myDict.cxx	/^   static void *new_PointHit(void *p = 0);$/;"	p	namespace:ROOT	file:	signature:(void *p = 0)
ROOT::new_PointHit	myDict.cxx	/^   static void *new_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
ROOT::new_StripHit	myDict.cxx	/^   static void *new_StripHit(void *p = 0);$/;"	p	namespace:ROOT	file:	signature:(void *p = 0)
ROOT::new_StripHit	myDict.cxx	/^   static void *new_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
R__DICTIONARY_FILENAME	myDict.cxx	7;"	d	file:
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
STRIPHIT_HH	StripHit.h	2;"	d
SUFFIXES	Makefile	/^SUFFIXES =$/;"	m
Shadow	myDict.cxx	/^   namespace Shadow {$/;"	n	namespace:ROOT	file:
Show	pulls.h	/^   virtual void     Show(Long64_t entry = -1);$/;"	p	class:pulls	access:public	signature:(Long64_t entry = -1)
Show	pulls.h	/^void pulls::Show(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
ShowMembers	myDict.cxx	/^void PointHit::ShowMembers(TMemberInspector &R__insp)$/;"	f	class:PointHit	signature:(TMemberInspector &R__insp)
ShowMembers	myDict.cxx	/^void StripHit::ShowMembers(TMemberInspector &R__insp)$/;"	f	class:StripHit	signature:(TMemberInspector &R__insp)
SpacepointRecoHit	PointHit.h	/^typedef GFRecoHitIfc<GFSpacepointHitPolicy> SpacepointRecoHit;$/;"	t
Streamer	myDict.cxx	/^void PointHit::Streamer(TBuffer &R__b)$/;"	f	class:PointHit	signature:(TBuffer &R__b)
Streamer	myDict.cxx	/^void StripHit::Streamer(TBuffer &R__b)$/;"	f	class:StripHit	signature:(TBuffer &R__b)
StripHit	StripHit.cxx	/^StripHit::StripHit()$/;"	f	class:StripHit	signature:()
StripHit	StripHit.cxx	/^StripHit::StripHit(TVector3 point,double res,double sigma,int proj,int smearFlag)$/;"	f	class:StripHit	signature:(TVector3 point,double res,double sigma,int proj,int smearFlag)
StripHit	StripHit.h	/^  StripHit();$/;"	p	class:StripHit	access:public	signature:()
StripHit	StripHit.h	/^  StripHit(TVector3 point,double res,double sigma,int proj,int smearFlag=1);$/;"	p	class:StripHit	access:public	signature:(TVector3 point,double res,double sigma,int proj,int smearFlag=1)
StripHit	StripHit.h	/^class StripHit : public PlanarRecoHit {$/;"	c	inherits:PlanarRecoHit
StripHit::Class	myDict.cxx	/^TClass *StripHit::Class()$/;"	f	class:StripHit	signature:()
StripHit::Class_Name	myDict.cxx	/^const char *StripHit::Class_Name()$/;"	f	class:StripHit	signature:()
StripHit::Dictionary	myDict.cxx	/^void StripHit::Dictionary()$/;"	f	class:StripHit	signature:()
StripHit::ImplFileLine	myDict.cxx	/^int StripHit::ImplFileLine()$/;"	f	class:StripHit	signature:()
StripHit::ImplFileName	myDict.cxx	/^const char *StripHit::ImplFileName()$/;"	f	class:StripHit	signature:()
StripHit::NparHitRep	StripHit.h	/^  static const int NparHitRep = 1;$/;"	m	class:StripHit	access:private
StripHit::ShowMembers	myDict.cxx	/^void StripHit::ShowMembers(TMemberInspector &R__insp)$/;"	f	class:StripHit	signature:(TMemberInspector &R__insp)
StripHit::Streamer	myDict.cxx	/^void StripHit::Streamer(TBuffer &R__b)$/;"	f	class:StripHit	signature:(TBuffer &R__b)
StripHit::StripHit	StripHit.cxx	/^StripHit::StripHit()$/;"	f	class:StripHit	signature:()
StripHit::StripHit	StripHit.cxx	/^StripHit::StripHit(TVector3 point,double res,double sigma,int proj,int smearFlag)$/;"	f	class:StripHit	signature:(TVector3 point,double res,double sigma,int proj,int smearFlag)
StripHit::StripHit	StripHit.h	/^  StripHit();$/;"	p	class:StripHit	access:public	signature:()
StripHit::StripHit	StripHit.h	/^  StripHit(TVector3 point,double res,double sigma,int proj,int smearFlag=1);$/;"	p	class:StripHit	access:public	signature:(TVector3 point,double res,double sigma,int proj,int smearFlag=1)
StripHit::clone	StripHit.cxx	/^StripHit::clone(){$/;"	f	class:StripHit	signature:()
StripHit::clone	StripHit.h	/^  virtual GFAbsRecoHit* clone();$/;"	p	class:StripHit	access:public	signature:()
StripHit::getHMatrix	StripHit.cxx	/^StripHit::getHMatrix(const GFAbsTrackRep* stateVector)$/;"	f	class:StripHit	signature:(const GFAbsTrackRep* stateVector)
StripHit::getHMatrix	StripHit.h	/^  virtual TMatrixT<double> getHMatrix(const GFAbsTrackRep* stateVector);$/;"	p	class:StripHit	access:public	signature:(const GFAbsTrackRep* stateVector)
StripHit::~StripHit	StripHit.cxx	/^StripHit::~StripHit()$/;"	f	class:StripHit	signature:()
StripHit::~StripHit	StripHit.h	/^  virtual ~StripHit();$/;"	p	class:StripHit	access:public	signature:()
StripHit_ShowMembers	myDict.cxx	/^   void StripHit_ShowMembers(void *obj, TMemberInspector &R__insp);$/;"	p	namespace:ROOT	file:	signature:(void *obj, TMemberInspector &R__insp)
_R__UNIQUE_	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PointHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	p	namespace:ROOT	file:	signature:(Init)
_R__UNIQUE_	myDict.cxx	/^   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StripHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));$/;"	p	namespace:ROOT	file:	signature:(Init)
arg_event_type	main.cxx	/^char arg_event_type[128];$/;"	v
arg_extrap_pos	main.cxx	/^char arg_extrap_pos[128];$/;"	v
arg_genfitGeom_name	main.cxx	/^char arg_genfitGeom_name[128];$/;"	v
arg_hit_type	main.cxx	/^char arg_hit_type[128];$/;"	v
arg_input_root	main.cxx	/^char arg_input_root[128];$/;"	v
arg_momini_x	main.cxx	/^double arg_momini_x;$/;"	v
arg_momini_y	main.cxx	/^double arg_momini_y;$/;"	v
arg_momini_z	main.cxx	/^double arg_momini_z;$/;"	v
arg_output_root	main.cxx	/^char arg_output_root[128];$/;"	v
arg_posini_x	main.cxx	/^double arg_posini_x;$/;"	v
arg_posini_y	main.cxx	/^double arg_posini_y;$/;"	v
arg_posini_z	main.cxx	/^double arg_posini_z;$/;"	v
arg_seed	main.cxx	/^int arg_seed;$/;"	v
arg_total	main.cxx	/^int arg_total;$/;"	v
arg_track_type	main.cxx	/^char arg_track_type[128];$/;"	v
arg_writeout_track_fp	main.cxx	/^FILE* arg_writeout_track_fp;$/;"	v
b_chi2	pulls.h	/^   TBranch        *b_chi2;   \/\/!$/;"	m	class:pulls	access:public
b_covMCT	pulls.h	/^   TBranch        *b_covMCT;   \/\/!$/;"	m	class:pulls	access:public
b_covREC	pulls.h	/^   TBranch        *b_covREC;   \/\/!$/;"	m	class:pulls	access:public
b_nfail	pulls.h	/^   TBranch        *b_nfail;   \/\/!$/;"	m	class:pulls	access:public
b_stMCT	pulls.h	/^   TBranch        *b_stMCT;   \/\/!$/;"	m	class:pulls	access:public
b_stREC	pulls.h	/^   TBranch        *b_stREC;   \/\/!$/;"	m	class:pulls	access:public
calc_pulls	main.cxx	/^int calc_pulls(GFAbsTrackRep *rep)$/;"	f	signature:(GFAbsTrackRep *rep)
chi2	main.cxx	/^   double chi2;$/;"	m	struct:tree_value	file:	access:public
chi2	pulls.h	/^   Double_t        chi2;$/;"	m	class:pulls	access:public
clone	PointHit.cxx	/^PointHit::clone(){$/;"	f	class:PointHit	signature:()
clone	PointHit.h	/^  virtual GFAbsRecoHit* clone();$/;"	p	class:PointHit	access:public	signature:()
clone	StripHit.cxx	/^StripHit::clone(){$/;"	f	class:StripHit	signature:()
clone	StripHit.h	/^  virtual GFAbsRecoHit* clone();$/;"	p	class:StripHit	access:public	signature:()
construct_geom	main.cxx	/^void construct_geom()$/;"	f	signature:()
covMCT	main.cxx	/^TMatrixT<double> *covMCT;$/;"	v
covMCT	pulls.h	/^   TMatrixT<double> *covMCT;$/;"	m	class:pulls	access:public
covREC	main.cxx	/^TMatrixT<double> *covREC;$/;"	v
covREC	pulls.h	/^   TMatrixT<double> *covREC;$/;"	m	class:pulls	access:public
deleteArray_PointHit	myDict.cxx	/^   static void deleteArray_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
deleteArray_PointHit	myDict.cxx	/^   static void deleteArray_PointHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
deleteArray_StripHit	myDict.cxx	/^   static void deleteArray_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
deleteArray_StripHit	myDict.cxx	/^   static void deleteArray_StripHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
delete_PointHit	myDict.cxx	/^   static void delete_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
delete_PointHit	myDict.cxx	/^   static void delete_PointHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
delete_StripHit	myDict.cxx	/^   static void delete_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
delete_StripHit	myDict.cxx	/^   static void delete_StripHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
destruct_PointHit	myDict.cxx	/^   static void destruct_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
destruct_PointHit	myDict.cxx	/^   static void destruct_PointHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
destruct_StripHit	myDict.cxx	/^   static void destruct_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
destruct_StripHit	myDict.cxx	/^   static void destruct_StripHit(void *p);$/;"	p	namespace:ROOT	file:	signature:(void *p)
elapsed_time	main.cxx	/^   double elapsed_time; \/\/ second$/;"	m	struct:tree_value	file:	access:public
error	main.cxx	/^   int error;$/;"	m	struct:tree_value	file:	access:public
f1	main.cxx	/^static TF1* f1;$/;"	v	file:
fChain	pulls.h	/^   TTree          *fChain;   \/\/!pointer to the analyzed TTree or TChain$/;"	m	class:pulls	access:public
fCurrent	pulls.h	/^   Int_t           fCurrent; \/\/!current Tree number in a TChain$/;"	m	class:pulls	access:public
fgIsA	myDict.cxx	/^TClass *PointHit::fgIsA = 0;  \/\/ static to hold class pointer$/;"	m	class:PointHit	file:
fill_tree_config	main.cxx	/^void fill_tree_config(const char* tname)$/;"	f	signature:(const char* tname)
first_call	main.cxx	/^static int first_call;$/;"	v	file:
fit	main.cxx	/^   struct trackpar fit;  \/\/ extrapolated at first hit$/;"	m	struct:tree_value	typeref:struct:tree_value::trackpar	file:	access:public
fitting	main.cxx	/^int fitting(int iev, struct tree_value* tv, GFTrack& fitTrack, GFAbsTrackRep* rep, GFDetPlane& plane)$/;"	f	signature:(int iev, struct tree_value* tv, GFTrack& fitTrack, GFAbsTrackRep* rep, GFDetPlane& plane)
free	myDict.cxx	266;"	d	file:
g_chamber_first_pos	main.cxx	/^double g_chamber_first_pos;$/;"	v
g_chamber_gas	main.cxx	/^char g_chamber_gas[32];$/;"	v
g_chamber_last_pos	main.cxx	/^double g_chamber_last_pos;$/;"	v
g_chamber_num_layer	main.cxx	/^int g_chamber_num_layer;$/;"	v
g_chamber_spacing	main.cxx	/^double g_chamber_spacing;$/;"	v
g_chamber_type	main.cxx	/^char g_chamber_type[32];$/;"	v
g_dio_startpoint	main.cxx	/^double g_dio_startpoint;\/\/ MeV\/c$/;"	v
g_hits_abs	main.cxx	/^struct hits g_hits_abs;$/;"	v	typeref:struct:hits
g_hits_biw	main.cxx	/^struct hits g_hits_biw;$/;"	v	typeref:struct:hits
g_hits_det	main.cxx	/^struct hits g_hits_det;$/;"	v	typeref:struct:hits
g_hits_tgt	main.cxx	/^struct hits g_hits_tgt;$/;"	v	typeref:struct:hits
g_inwall_first_pos	main.cxx	/^double g_inwall_first_pos;$/;"	v
g_inwall_material	main.cxx	/^char g_inwall_material[32];$/;"	v
g_inwall_thickness	main.cxx	/^double g_inwall_thickness;$/;"	v
g_nhits_fit	main.cxx	/^int g_nhits_fit;$/;"	v
g_nhits_tgt_before_chamber	main.cxx	/^int g_nhits_tgt_before_chamber;$/;"	v
g_scinti_first_pos	main.cxx	/^double g_scinti_first_pos;$/;"	v
g_scinti_material	main.cxx	/^char g_scinti_material[32];$/;"	v
g_scinti_thickness	main.cxx	/^double g_scinti_thickness;$/;"	v
g_scinti_type	main.cxx	/^char g_scinti_type[32];$/;"	v
g_solenoid_bfld_tesla	main.cxx	/^double g_solenoid_bfld_tesla;$/;"	v
g_solenoid_bfld_type	main.cxx	/^char g_solenoid_bfld_type[32]; \/\/ uniform, gradient$/;"	v
g_solenoid_material	main.cxx	/^char g_solenoid_material[32];$/;"	v
g_target_center_disk_number	main.cxx	/^int g_target_center_disk_number;$/;"	v
g_target_material	main.cxx	/^char g_target_material[32];$/;"	v
g_target_number_of_disk	main.cxx	/^int g_target_number_of_disk;$/;"	v
g_target_offset_z	main.cxx	/^double g_target_offset_z;$/;"	v
g_target_radius	main.cxx	/^double g_target_radius;$/;"	v
g_target_spacing	main.cxx	/^double g_target_spacing;$/;"	v
g_target_thickness	main.cxx	/^double g_target_thickness;$/;"	v
g_target_type	main.cxx	/^char g_target_type[32];$/;"	v
getHMatrix	PointHit.cxx	/^PointHit::getHMatrix(const GFAbsTrackRep* stateVector)$/;"	f	class:PointHit	signature:(const GFAbsTrackRep* stateVector)
getHMatrix	PointHit.h	/^  virtual TMatrixT<double> getHMatrix(const GFAbsTrackRep* stateVector);$/;"	p	class:PointHit	access:public	signature:(const GFAbsTrackRep* stateVector)
getHMatrix	StripHit.cxx	/^StripHit::getHMatrix(const GFAbsTrackRep* stateVector)$/;"	f	class:StripHit	signature:(const GFAbsTrackRep* stateVector)
getHMatrix	StripHit.h	/^  virtual TMatrixT<double> getHMatrix(const GFAbsTrackRep* stateVector);$/;"	p	class:StripHit	access:public	signature:(const GFAbsTrackRep* stateVector)
get_hit_at_biw	main.cxx	/^int get_hit_at_biw(const char* volname, const char* pre_volname)$/;"	f	signature:(const char* volname, const char* pre_volname)
get_hit_at_scinti	main.cxx	/^int get_hit_at_scinti(const char* volname, const char* pre_volname)$/;"	f	signature:(const char* volname, const char* pre_volname)
get_hit_at_target	main.cxx	/^int get_hit_at_target(const char* volname, const char* pre_volname, int* disk_number)$/;"	f	signature:(const char* volname, const char* pre_volname, int* disk_number)
get_init_mom	main.cxx	/^void get_init_mom(TVector3& mom)$/;"	f	signature:(TVector3& mom)
get_init_mom_DIO	main.cxx	/^void get_init_mom_DIO(TVector3& mom)$/;"	f	signature:(TVector3& mom)
get_init_mom_Proton	main.cxx	/^void get_init_mom_Proton(TVector3& mom)$/;"	f	signature:(TVector3& mom)
get_init_mom_test	main.cxx	/^void get_init_mom_test(TVector3& mom)$/;"	f	signature:(TVector3& mom)
get_init_pos	main.cxx	/^int get_init_pos(TVector3& pos)$/;"	f	signature:(TVector3& pos)
get_init_pos_cone	main.cxx	/^int get_init_pos_cone(TVector3& pos)$/;"	f	signature:(TVector3& pos)
get_init_pos_cylinder	main.cxx	/^int get_init_pos_cylinder(TVector3& pos)$/;"	f	signature:(TVector3& pos)
get_layer_number	main.cxx	/^int get_layer_number(const char* volname)$/;"	f	signature:(const char* volname)
get_nhits_for_fitting2	main.cxx	/^int get_nhits_for_fitting2()$/;"	f	signature:()
hit	main.cxx	/^   struct trackpar hit;  \/\/ first hit$/;"	m	struct:tree_value	typeref:struct:tree_value::trackpar	file:	access:public
hits	main.cxx	/^struct hits$/;"	s	file:
hits::layer	main.cxx	/^   int layer[MAX_HIT];$/;"	m	struct:hits	file:	access:public
hits::momx	main.cxx	/^   double momx[MAX_HIT];$/;"	m	struct:hits	file:	access:public
hits::momy	main.cxx	/^   double momy[MAX_HIT];$/;"	m	struct:hits	file:	access:public
hits::momz	main.cxx	/^   double momz[MAX_HIT];$/;"	m	struct:hits	file:	access:public
hits::nhits	main.cxx	/^   int nhits;$/;"	m	struct:hits	file:	access:public
hits::posx	main.cxx	/^   double posx[MAX_HIT];$/;"	m	struct:hits	file:	access:public
hits::posy	main.cxx	/^   double posy[MAX_HIT];$/;"	m	struct:hits	file:	access:public
hits::posz	main.cxx	/^   double posz[MAX_HIT];$/;"	m	struct:hits	file:	access:public
hits::tofg	main.cxx	/^   double tofg[MAX_HIT];$/;"	m	struct:hits	file:	access:public
iev	main.cxx	/^   int iev;$/;"	m	struct:tree_value	file:	access:public
info_arch	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
ini	main.cxx	/^   struct trackpar ini;  \/\/ hit at start point$/;"	m	struct:tree_value	typeref:struct:tree_value::trackpar	file:	access:public
ini_disk_number	main.cxx	/^   int ini_disk_number;$/;"	m	struct:tree_value	file:	access:public
init_args	main.cxx	/^void init_args()$/;"	f	signature:()
invmom	main.cxx	/^double invmom;$/;"	v
layer	main.cxx	/^   int layer[MAX_HIT];$/;"	m	struct:hits	file:	access:public
main	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	main.cxx	/^int main(int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
make_branch	main.cxx	/^TTree* make_branch(const char* tname, struct tree_value* tv)$/;"	f	signature:(const char* tname, struct tree_value* tv)
make_true_hit	main.cxx	/^int make_true_hit(int iev, struct tree_value* tv, $/;"	f	signature:(int iev, struct tree_value* tv, TVector3& posini, TVector3& momini, TVector3 &posErr, TVector3 &momErr, GFAbsTrackRep* rephits)
malloc	myDict.cxx	265;"	d	file:
momPu	main.cxx	/^double momPu;$/;"	v
momRe	main.cxx	/^double momRe;$/;"	v
momSi	main.cxx	/^double momSi;$/;"	v
momTr	main.cxx	/^double momTr;$/;"	v
momx	main.cxx	/^   double momx[MAX_HIT];$/;"	m	struct:hits	file:	access:public
momy	main.cxx	/^   double momy[MAX_HIT];$/;"	m	struct:hits	file:	access:public
momz	main.cxx	/^   double momz[MAX_HIT];$/;"	m	struct:hits	file:	access:public
ndf	main.cxx	/^   int ndf;$/;"	m	struct:tree_value	file:	access:public
newArray_PointHit	myDict.cxx	/^   static void *newArray_PointHit(Long_t nElements, void *p) {$/;"	f	namespace:ROOT	signature:(Long_t nElements, void *p)
newArray_PointHit	myDict.cxx	/^   static void *newArray_PointHit(Long_t size, void *p);$/;"	p	namespace:ROOT	file:	signature:(Long_t size, void *p)
newArray_StripHit	myDict.cxx	/^   static void *newArray_StripHit(Long_t nElements, void *p) {$/;"	f	namespace:ROOT	signature:(Long_t nElements, void *p)
newArray_StripHit	myDict.cxx	/^   static void *newArray_StripHit(Long_t size, void *p);$/;"	p	namespace:ROOT	file:	signature:(Long_t size, void *p)
new_PointHit	myDict.cxx	/^   static void *new_PointHit(void *p = 0);$/;"	p	namespace:ROOT	file:	signature:(void *p = 0)
new_PointHit	myDict.cxx	/^   static void *new_PointHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
new_StripHit	myDict.cxx	/^   static void *new_StripHit(void *p = 0);$/;"	p	namespace:ROOT	file:	signature:(void *p = 0)
new_StripHit	myDict.cxx	/^   static void *new_StripHit(void *p) {$/;"	f	namespace:ROOT	signature:(void *p)
nfail	main.cxx	/^   int nfail;$/;"	m	struct:tree_value	file:	access:public
nfail	pulls.h	/^   Int_t           nfail;$/;"	m	class:pulls	access:public
nhits	main.cxx	/^   int nhits;$/;"	m	struct:hits	file:	access:public
p	myDict.cxx	/^    size_t (G__Sizep2memfuncmyDict::*p)();$/;"	m	class:G__Sizep2memfuncmyDict	file:	access:private
posx	main.cxx	/^   double posx[MAX_HIT];$/;"	m	struct:hits	file:	access:public
posy	main.cxx	/^   double posy[MAX_HIT];$/;"	m	struct:hits	file:	access:public
posz	main.cxx	/^   double posz[MAX_HIT];$/;"	m	struct:hits	file:	access:public
print_hits	main.cxx	/^void print_hits(int idx, struct hits* hits)$/;"	f	signature:(int idx, struct hits* hits)
print_tree_value	main.cxx	/^void print_tree_value(const char* prefix, FILE*fp, struct tree_value* tv)$/;"	f	signature:(const char* prefix, FILE*fp, struct tree_value* tv)
print_usage	main.cxx	/^void print_usage(char* prog_name)$/;"	f	signature:(char* prog_name)
private	myDict.cxx	11;"	d	file:
prob	main.cxx	/^   double prob;$/;"	m	struct:tree_value	file:	access:public
protected	myDict.cxx	12;"	d	file:
pulls	pulls.h	/^   pulls(TTree *tree=0);$/;"	p	class:pulls	access:public	signature:(TTree *tree=0)
pulls	pulls.h	/^class pulls {$/;"	c
pulls	pulls.h	/^pulls::pulls(TTree *tree)$/;"	f	class:pulls	signature:(TTree *tree)
pulls::Cut	pulls.h	/^   virtual Int_t    Cut(Long64_t entry);$/;"	p	class:pulls	access:public	signature:(Long64_t entry)
pulls::Cut	pulls.h	/^Int_t pulls::Cut(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
pulls::GetEntry	pulls.h	/^   virtual Int_t    GetEntry(Long64_t entry);$/;"	p	class:pulls	access:public	signature:(Long64_t entry)
pulls::GetEntry	pulls.h	/^Int_t pulls::GetEntry(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
pulls::Init	pulls.h	/^   virtual void     Init(TTree *tree);$/;"	p	class:pulls	access:public	signature:(TTree *tree)
pulls::Init	pulls.h	/^void pulls::Init(TTree *tree)$/;"	f	class:pulls	signature:(TTree *tree)
pulls::LoadTree	pulls.h	/^   virtual Long64_t LoadTree(Long64_t entry);$/;"	p	class:pulls	access:public	signature:(Long64_t entry)
pulls::LoadTree	pulls.h	/^Long64_t pulls::LoadTree(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
pulls::Loop	pulls.h	/^   virtual void     Loop(TString pdfName);$/;"	p	class:pulls	access:public	signature:(TString pdfName)
pulls::Notify	pulls.h	/^   virtual Bool_t   Notify();$/;"	p	class:pulls	access:public	signature:()
pulls::Notify	pulls.h	/^Bool_t pulls::Notify()$/;"	f	class:pulls	signature:()
pulls::Show	pulls.h	/^   virtual void     Show(Long64_t entry = -1);$/;"	p	class:pulls	access:public	signature:(Long64_t entry = -1)
pulls::Show	pulls.h	/^void pulls::Show(Long64_t entry)$/;"	f	class:pulls	signature:(Long64_t entry)
pulls::b_chi2	pulls.h	/^   TBranch        *b_chi2;   \/\/!$/;"	m	class:pulls	access:public
pulls::b_covMCT	pulls.h	/^   TBranch        *b_covMCT;   \/\/!$/;"	m	class:pulls	access:public
pulls::b_covREC	pulls.h	/^   TBranch        *b_covREC;   \/\/!$/;"	m	class:pulls	access:public
pulls::b_nfail	pulls.h	/^   TBranch        *b_nfail;   \/\/!$/;"	m	class:pulls	access:public
pulls::b_stMCT	pulls.h	/^   TBranch        *b_stMCT;   \/\/!$/;"	m	class:pulls	access:public
pulls::b_stREC	pulls.h	/^   TBranch        *b_stREC;   \/\/!$/;"	m	class:pulls	access:public
pulls::chi2	pulls.h	/^   Double_t        chi2;$/;"	m	class:pulls	access:public
pulls::covMCT	pulls.h	/^   TMatrixT<double> *covMCT;$/;"	m	class:pulls	access:public
pulls::covREC	pulls.h	/^   TMatrixT<double> *covREC;$/;"	m	class:pulls	access:public
pulls::fChain	pulls.h	/^   TTree          *fChain;   \/\/!pointer to the analyzed TTree or TChain$/;"	m	class:pulls	access:public
pulls::fCurrent	pulls.h	/^   Int_t           fCurrent; \/\/!current Tree number in a TChain$/;"	m	class:pulls	access:public
pulls::nfail	pulls.h	/^   Int_t           nfail;$/;"	m	class:pulls	access:public
pulls::pulls	pulls.h	/^   pulls(TTree *tree=0);$/;"	p	class:pulls	access:public	signature:(TTree *tree=0)
pulls::pulls	pulls.h	/^pulls::pulls(TTree *tree)$/;"	f	class:pulls	signature:(TTree *tree)
pulls::stMCT	pulls.h	/^   TMatrixT<double> *stMCT;$/;"	m	class:pulls	access:public
pulls::stREC	pulls.h	/^   TMatrixT<double> *stREC;$/;"	m	class:pulls	access:public
pulls::~pulls	pulls.h	/^   virtual ~pulls();$/;"	p	class:pulls	access:public	signature:()
pulls::~pulls	pulls.h	/^pulls::~pulls()$/;"	f	class:pulls	signature:()
pulls_h	pulls.h	9;"	d
px	main.cxx	/^   double px;$/;"	m	struct:trackpar	file:	access:public
py	main.cxx	/^   double py;$/;"	m	struct:trackpar	file:	access:public
pz	main.cxx	/^   double pz; \/\/ longitudinal momentum$/;"	m	struct:trackpar	file:	access:public
qopPu	main.cxx	/^double qopPu;$/;"	v
qopRe	main.cxx	/^double qopRe;$/;"	v
qopSi	main.cxx	/^double qopSi;$/;"	v
qopTr	main.cxx	/^double qopTr;$/;"	v
read_config	main.cxx	/^int read_config(char* fname)$/;"	f	signature:(char* fname)
read_hit	main.cxx	/^int read_hit(int iev, char* root_file, TVector3& posini, TVector3& momini)$/;"	f	signature:(int iev, char* root_file, TVector3& posini, TVector3& momini)
read_init_param	main.cxx	/^void read_init_param(char* fname)$/;"	f	signature:(char* fname)
root_f	main.cxx	/^TFile* root_f;$/;"	v
root_hits_momx	main.cxx	/^double root_hits_momx[MAX_HIT];$/;"	v
root_hits_momy	main.cxx	/^double root_hits_momy[MAX_HIT];$/;"	v
root_hits_momz	main.cxx	/^double root_hits_momz[MAX_HIT];$/;"	v
root_hits_posx	main.cxx	/^double root_hits_posx[MAX_HIT];$/;"	v
root_hits_posy	main.cxx	/^double root_hits_posy[MAX_HIT];$/;"	v
root_hits_posz	main.cxx	/^double root_hits_posz[MAX_HIT];$/;"	v
root_ini_momx	main.cxx	/^double root_ini_momx;$/;"	v
root_ini_momy	main.cxx	/^double root_ini_momy;$/;"	v
root_ini_momz	main.cxx	/^double root_ini_momz;$/;"	v
root_ini_posx	main.cxx	/^double root_ini_posx;$/;"	v
root_ini_posy	main.cxx	/^double root_ini_posy;$/;"	v
root_ini_posz	main.cxx	/^double root_ini_posz;$/;"	v
root_nhits	main.cxx	/^int root_nhits;$/;"	v
root_opened	main.cxx	/^int root_opened=0;$/;"	v
root_t	main.cxx	/^TTree* root_t;$/;"	v
sigma_p	main.cxx	/^double sigma_p;$/;"	v
sigmasqustate	main.cxx	/^double sigmasqustate;$/;"	v
sizep2memfunc	myDict.cxx	/^    size_t sizep2memfunc() { return(sizeof(p)); }$/;"	f	class:G__Sizep2memfuncmyDict	access:public	signature:()
sqrt2	main.cxx	/^inline double sqrt2(double a, double b) { return sqrt(a*a+b*b); }$/;"	f	signature:(double a, double b)
sqrt3	main.cxx	/^inline double sqrt3(double a, double b, double c) { return sqrt(a*a+b*b+c*c); }$/;"	f	signature:(double a, double b, double c)
sscanf_with_unit	main.cxx	/^void sscanf_with_unit(char* line, const char* format, double* value_in_cm)$/;"	f	signature:(char* line, const char* format, double* value_in_cm)
stMCT	main.cxx	/^TMatrixT<double> *stMCT;$/;"	v
stMCT	pulls.h	/^   TMatrixT<double> *stMCT;$/;"	m	class:pulls	access:public
stREC	main.cxx	/^TMatrixT<double> *stREC;$/;"	v
stREC	pulls.h	/^   TMatrixT<double> *stREC;$/;"	m	class:pulls	access:public
std	myDict.cxx	/^namespace std {} using namespace std;$/;"	n	file:
std	myDict.h	/^namespace std { }$/;"	n
tofg	main.cxx	/^   double tofg[MAX_HIT];$/;"	m	struct:hits	file:	access:public
trackpar	main.cxx	/^struct trackpar$/;"	s	file:
trackpar::px	main.cxx	/^   double px;$/;"	m	struct:trackpar	file:	access:public
trackpar::py	main.cxx	/^   double py;$/;"	m	struct:trackpar	file:	access:public
trackpar::pz	main.cxx	/^   double pz; \/\/ longitudinal momentum$/;"	m	struct:trackpar	file:	access:public
trackpar::x	main.cxx	/^   double x;$/;"	m	struct:trackpar	file:	access:public
trackpar::y	main.cxx	/^   double y;$/;"	m	struct:trackpar	file:	access:public
trackpar::z	main.cxx	/^   double z;$/;"	m	struct:trackpar	file:	access:public
tree_value	main.cxx	/^struct tree_value$/;"	s	file:
tree_value::chi2	main.cxx	/^   double chi2;$/;"	m	struct:tree_value	file:	access:public
tree_value::elapsed_time	main.cxx	/^   double elapsed_time; \/\/ second$/;"	m	struct:tree_value	file:	access:public
tree_value::error	main.cxx	/^   int error;$/;"	m	struct:tree_value	file:	access:public
tree_value::fit	main.cxx	/^   struct trackpar fit;  \/\/ extrapolated at first hit$/;"	m	struct:tree_value	typeref:struct:tree_value::trackpar	file:	access:public
tree_value::hit	main.cxx	/^   struct trackpar hit;  \/\/ first hit$/;"	m	struct:tree_value	typeref:struct:tree_value::trackpar	file:	access:public
tree_value::iev	main.cxx	/^   int iev;$/;"	m	struct:tree_value	file:	access:public
tree_value::ini	main.cxx	/^   struct trackpar ini;  \/\/ hit at start point$/;"	m	struct:tree_value	typeref:struct:tree_value::trackpar	file:	access:public
tree_value::ini_disk_number	main.cxx	/^   int ini_disk_number;$/;"	m	struct:tree_value	file:	access:public
tree_value::ndf	main.cxx	/^   int ndf;$/;"	m	struct:tree_value	file:	access:public
tree_value::nfail	main.cxx	/^   int nfail;$/;"	m	struct:tree_value	file:	access:public
tree_value::prob	main.cxx	/^   double prob;$/;"	m	struct:tree_value	file:	access:public
uPu	main.cxx	/^double uPu;$/;"	v
uRe	main.cxx	/^double uRe;$/;"	v
uSi	main.cxx	/^double uSi;$/;"	v
uTr	main.cxx	/^double uTr;$/;"	v
upPu	main.cxx	/^double upPu;$/;"	v
upRe	main.cxx	/^double upRe;$/;"	v
upSi	main.cxx	/^double upSi;$/;"	v
upTr	main.cxx	/^double upTr;$/;"	v
vPu	main.cxx	/^double vPu;$/;"	v
vRe	main.cxx	/^double vRe;$/;"	v
vSi	main.cxx	/^double vSi;$/;"	v
vTr	main.cxx	/^double vTr;$/;"	v
vpPu	main.cxx	/^double vpPu;$/;"	v
vpRe	main.cxx	/^double vpRe;$/;"	v
vpSi	main.cxx	/^double vpSi;$/;"	v
vpTr	main.cxx	/^double vpTr;$/;"	v
x	main.cxx	/^   double x;$/;"	m	struct:trackpar	file:	access:public
y	main.cxx	/^   double y;$/;"	m	struct:trackpar	file:	access:public
z	main.cxx	/^   double z;$/;"	m	struct:trackpar	file:	access:public
~G__cpp_setup_initmyDict	myDict.cxx	/^   ~G__cpp_setup_initmyDict() { G__remove_setup_func("myDict"); }$/;"	f	class:G__cpp_setup_initmyDict	access:public	signature:()
~PointHit	PointHit.cxx	/^PointHit::~PointHit()$/;"	f	class:PointHit	signature:()
~PointHit	PointHit.h	/^  virtual ~PointHit();$/;"	p	class:PointHit	access:public	signature:()
~StripHit	StripHit.cxx	/^StripHit::~StripHit()$/;"	f	class:StripHit	signature:()
~StripHit	StripHit.h	/^  virtual ~StripHit();$/;"	p	class:StripHit	access:public	signature:()
~pulls	pulls.h	/^   virtual ~pulls();$/;"	p	class:pulls	access:public	signature:()
~pulls	pulls.h	/^pulls::~pulls()$/;"	f	class:pulls	signature:()
