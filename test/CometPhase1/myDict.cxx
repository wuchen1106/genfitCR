//
// File generated by /opt/root/bin/rootcint at Mon Apr  9 14:44:41 2012

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedImusicdIworkspacedIgenfitdItestdICometPhase1dImyDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "myDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void StripHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_StripHit(void *p = 0);
   static void *newArray_StripHit(Long_t size, void *p);
   static void delete_StripHit(void *p);
   static void deleteArray_StripHit(void *p);
   static void destruct_StripHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::StripHit*)
   {
      ::StripHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::StripHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("StripHit", ::StripHit::Class_Version(), "./StripHit.h", 15,
                  typeid(::StripHit), DefineBehavior(ptr, ptr),
                  &::StripHit::Dictionary, isa_proxy, 4,
                  sizeof(::StripHit) );
      instance.SetNew(&new_StripHit);
      instance.SetNewArray(&newArray_StripHit);
      instance.SetDelete(&delete_StripHit);
      instance.SetDeleteArray(&deleteArray_StripHit);
      instance.SetDestructor(&destruct_StripHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::StripHit*)
   {
      return GenerateInitInstanceLocal((::StripHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StripHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void PointHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PointHit(void *p = 0);
   static void *newArray_PointHit(Long_t size, void *p);
   static void delete_PointHit(void *p);
   static void deleteArray_PointHit(void *p);
   static void destruct_PointHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PointHit*)
   {
      ::PointHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PointHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PointHit", ::PointHit::Class_Version(), "./PointHit.h", 15,
                  typeid(::PointHit), DefineBehavior(ptr, ptr),
                  &::PointHit::Dictionary, isa_proxy, 4,
                  sizeof(::PointHit) );
      instance.SetNew(&new_PointHit);
      instance.SetNewArray(&newArray_PointHit);
      instance.SetDelete(&delete_PointHit);
      instance.SetDeleteArray(&deleteArray_PointHit);
      instance.SetDestructor(&destruct_PointHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PointHit*)
   {
      return GenerateInitInstanceLocal((::PointHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PointHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *StripHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *StripHit::Class_Name()
{
   return "StripHit";
}

//______________________________________________________________________________
const char *StripHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::StripHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int StripHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::StripHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void StripHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::StripHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *StripHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::StripHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *PointHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PointHit::Class_Name()
{
   return "PointHit";
}

//______________________________________________________________________________
const char *PointHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PointHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PointHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PointHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PointHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PointHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PointHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PointHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void PointHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class PointHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PointHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(PointHit::Class(),this);
   }
}

//______________________________________________________________________________
void PointHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PointHit.
      TClass *R__cl = ::PointHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      GFRecoHitIfc<GFSpacepointHitPolicy>::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PointHit(void *p) {
      return  p ? new(p) ::PointHit : new ::PointHit;
   }
   static void *newArray_PointHit(Long_t nElements, void *p) {
      return p ? new(p) ::PointHit[nElements] : new ::PointHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_PointHit(void *p) {
      delete ((::PointHit*)p);
   }
   static void deleteArray_PointHit(void *p) {
      delete [] ((::PointHit*)p);
   }
   static void destruct_PointHit(void *p) {
      typedef ::PointHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PointHit

//______________________________________________________________________________
void StripHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class StripHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(StripHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(StripHit::Class(),this);
   }
}

//______________________________________________________________________________
void StripHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class StripHit.
      TClass *R__cl = ::StripHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      GFRecoHitIfc<GFPlanarHitPolicy>::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_StripHit(void *p) {
      return  p ? new(p) ::StripHit : new ::StripHit;
   }
   static void *newArray_StripHit(Long_t nElements, void *p) {
      return p ? new(p) ::StripHit[nElements] : new ::StripHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_StripHit(void *p) {
      delete ((::StripHit*)p);
   }
   static void deleteArray_StripHit(void *p) {
      delete [] ((::StripHit*)p);
   }
   static void destruct_StripHit(void *p) {
      typedef ::StripHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::StripHit

/********************************************************
* /home/music/workspace/genfit/test/CometPhase1/myDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablemyDict();

extern "C" void G__set_cpp_environmentmyDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("StripHit.h");
  G__add_compiledheader("PointHit.h");
  G__cpp_reset_tagtablemyDict();
}
#include <new>
extern "C" int G__cpp_dllrevmyDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* StripHit */
static int G__myDict_266_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   StripHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StripHit[n];
     } else {
       p = new((void*) gvp) StripHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StripHit;
     } else {
       p = new((void*) gvp) StripHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_StripHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   StripHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StripHit(
*((TVector3*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) StripHit(
*((TVector3*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StripHit(
*((TVector3*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) StripHit(
*((TVector3*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_StripHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) StripHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StripHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) StripHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      StripHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((StripHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StripHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) StripHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StripHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_266_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) StripHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__myDict_266_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   StripHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new StripHit(*(StripHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_StripHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef StripHit G__TStripHit;
static int G__myDict_266_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (StripHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((StripHit*) (soff+(sizeof(StripHit)*i)))->~G__TStripHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (StripHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((StripHit*) (soff))->~G__TStripHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__myDict_266_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   StripHit* dest = (StripHit*) G__getstructoffset();
   *dest = *(StripHit*) libp->para[0].ref;
   const StripHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PointHit */
static int G__myDict_269_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PointHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PointHit[n];
     } else {
       p = new((void*) gvp) PointHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PointHit;
     } else {
       p = new((void*) gvp) PointHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_PointHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PointHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new PointHit(
*((TVector3*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) PointHit(
*((TVector3*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_PointHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PointHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PointHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PointHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PointHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PointHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PointHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PointHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PointHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__myDict_269_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PointHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__myDict_269_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PointHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PointHit(*(PointHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__myDictLN_PointHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PointHit G__TPointHit;
static int G__myDict_269_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PointHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PointHit*) (soff+(sizeof(PointHit)*i)))->~G__TPointHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PointHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PointHit*) (soff))->~G__TPointHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__myDict_269_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PointHit* dest = (PointHit*) G__getstructoffset();
   *dest = *(PointHit*) libp->para[0].ref;
   const PointHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* StripHit */

/* PointHit */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncmyDict {
 public:
  G__Sizep2memfuncmyDict(): p(&G__Sizep2memfuncmyDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncmyDict::*p)();
};

size_t G__get_sizep2memfuncmyDict()
{
  G__Sizep2memfuncmyDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancemyDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__myDictLN_StripHit))) {
     StripHit *G__Lderived;
     G__Lderived=(StripHit*)0x1000;
     {
       GFRecoHitIfc<GFPlanarHitPolicy> *G__Lpbase=(GFRecoHitIfc<GFPlanarHitPolicy>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__myDictLN_StripHit),G__get_linked_tagnum(&G__myDictLN_GFRecoHitIfclEGFPlanarHitPolicygR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       GFAbsRecoHit *G__Lpbase=(GFAbsRecoHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__myDictLN_StripHit),G__get_linked_tagnum(&G__myDictLN_GFAbsRecoHit),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__myDictLN_StripHit),G__get_linked_tagnum(&G__myDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__myDictLN_PointHit))) {
     PointHit *G__Lderived;
     G__Lderived=(PointHit*)0x1000;
     {
       GFRecoHitIfc<GFSpacepointHitPolicy> *G__Lpbase=(GFRecoHitIfc<GFSpacepointHitPolicy>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__myDictLN_PointHit),G__get_linked_tagnum(&G__myDictLN_GFRecoHitIfclEGFSpacepointHitPolicygR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       GFAbsRecoHit *G__Lpbase=(GFAbsRecoHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__myDictLN_PointHit),G__get_linked_tagnum(&G__myDictLN_GFAbsRecoHit),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__myDictLN_PointHit),G__get_linked_tagnum(&G__myDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablemyDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__myDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__myDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__myDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* StripHit */
static void G__setup_memvarStripHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_StripHit));
   { StripHit *p; p=(StripHit*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,4,"NparHitRep=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__myDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PointHit */
static void G__setup_memvarPointHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__myDictLN_PointHit));
   { PointHit *p; p=(PointHit*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,4,"NparHitRep=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__myDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarmyDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncStripHit(void) {
   /* StripHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_StripHit));
   G__memfunc_setup("StripHit",823,G__myDict_266_0_1, 105, G__get_linked_tagnum(&G__myDictLN_StripHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StripHit",823,G__myDict_266_0_2, 105, G__get_linked_tagnum(&G__myDictLN_StripHit), -1, 0, 5, 1, 1, 0, 
"u 'TVector3' - 0 - point d - - 0 - res "
"d - - 0 - sigma i - - 0 - proj "
"i - - 0 '1' smearFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clone",529,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__myDictLN_GFAbsRecoHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getHMatrix",1021,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__myDictLN_TMatrixTlEdoublegR), -1, 0, 1, 1, 1, 0, "U 'GFAbsTrackRep' - 10 - stateVector", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__myDict_266_0_5, 85, G__get_linked_tagnum(&G__myDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&StripHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__myDict_266_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StripHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__myDict_266_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&StripHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__myDict_266_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&StripHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__myDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__myDict_266_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__myDict_266_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StripHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__myDict_266_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&StripHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__myDict_266_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StripHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__myDict_266_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&StripHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("StripHit", 823, G__myDict_266_0_17, (int) ('i'), G__get_linked_tagnum(&G__myDictLN_StripHit), -1, 0, 1, 1, 1, 0, "u 'StripHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~StripHit", 949, G__myDict_266_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__myDict_266_0_19, (int) ('u'), G__get_linked_tagnum(&G__myDictLN_StripHit), -1, 1, 1, 1, 1, 0, "u 'StripHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPointHit(void) {
   /* PointHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__myDictLN_PointHit));
   G__memfunc_setup("PointHit",815,G__myDict_269_0_1, 105, G__get_linked_tagnum(&G__myDictLN_PointHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PointHit",815,G__myDict_269_0_2, 105, G__get_linked_tagnum(&G__myDictLN_PointHit), -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 0 - point d - - 0 - resXY "
"d - - 0 - resZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clone",529,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__myDictLN_GFAbsRecoHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getHMatrix",1021,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__myDictLN_TMatrixTlEdoublegR), -1, 0, 1, 1, 1, 0, "U 'GFAbsTrackRep' - 10 - stateVector", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__myDict_269_0_5, 85, G__get_linked_tagnum(&G__myDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PointHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__myDict_269_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PointHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__myDict_269_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PointHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__myDict_269_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PointHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__myDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__myDict_269_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__myDict_269_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PointHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__myDict_269_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PointHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__myDict_269_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PointHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__myDict_269_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PointHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PointHit", 815, G__myDict_269_0_17, (int) ('i'), G__get_linked_tagnum(&G__myDictLN_PointHit), -1, 0, 1, 1, 1, 0, "u 'PointHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PointHit", 941, G__myDict_269_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__myDict_269_0_19, (int) ('u'), G__get_linked_tagnum(&G__myDictLN_PointHit), -1, 1, 1, 1, 1, 0, "u 'PointHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncmyDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalmyDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcmyDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__myDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__myDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__myDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__myDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__myDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__myDictLN_GFAbsRecoHit = { "GFAbsRecoHit" , 99 , -1 };
G__linked_taginfo G__myDictLN_GFAbsTrackRep = { "GFAbsTrackRep" , 99 , -1 };
G__linked_taginfo G__myDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__myDictLN_GFRecoHitIfclEGFPlanarHitPolicygR = { "GFRecoHitIfc<GFPlanarHitPolicy>" , 99 , -1 };
G__linked_taginfo G__myDictLN_StripHit = { "StripHit" , 99 , -1 };
G__linked_taginfo G__myDictLN_GFRecoHitIfclEGFSpacepointHitPolicygR = { "GFRecoHitIfc<GFSpacepointHitPolicy>" , 99 , -1 };
G__linked_taginfo G__myDictLN_PointHit = { "PointHit" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablemyDict() {
  G__myDictLN_TClass.tagnum = -1 ;
  G__myDictLN_TBuffer.tagnum = -1 ;
  G__myDictLN_TMemberInspector.tagnum = -1 ;
  G__myDictLN_TObject.tagnum = -1 ;
  G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__myDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__myDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__myDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__myDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__myDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__myDictLN_TVector3.tagnum = -1 ;
  G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__myDictLN_GFAbsRecoHit.tagnum = -1 ;
  G__myDictLN_GFAbsTrackRep.tagnum = -1 ;
  G__myDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__myDictLN_GFRecoHitIfclEGFPlanarHitPolicygR.tagnum = -1 ;
  G__myDictLN_StripHit.tagnum = -1 ;
  G__myDictLN_GFRecoHitIfclEGFSpacepointHitPolicygR.tagnum = -1 ;
  G__myDictLN_PointHit.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablemyDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__myDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__myDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__myDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__myDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__myDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__myDictLN_GFAbsRecoHit);
   G__get_linked_tagnum_fwd(&G__myDictLN_GFAbsTrackRep);
   G__get_linked_tagnum_fwd(&G__myDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__myDictLN_GFRecoHitIfclEGFPlanarHitPolicygR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__myDictLN_StripHit),sizeof(StripHit),-1,324864,(char*)NULL,G__setup_memvarStripHit,G__setup_memfuncStripHit);
   G__get_linked_tagnum_fwd(&G__myDictLN_GFRecoHitIfclEGFSpacepointHitPolicygR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__myDictLN_PointHit),sizeof(PointHit),-1,324864,(char*)NULL,G__setup_memvarPointHit,G__setup_memfuncPointHit);
}
extern "C" void G__cpp_setupmyDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupmyDict()");
  G__set_cpp_environmentmyDict();
  G__cpp_setup_tagtablemyDict();

  G__cpp_setup_inheritancemyDict();

  G__cpp_setup_typetablemyDict();

  G__cpp_setup_memvarmyDict();

  G__cpp_setup_memfuncmyDict();
  G__cpp_setup_globalmyDict();
  G__cpp_setup_funcmyDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncmyDict();
  return;
}
class G__cpp_setup_initmyDict {
  public:
    G__cpp_setup_initmyDict() { G__add_setup_func("myDict",(G__incsetup)(&G__cpp_setupmyDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initmyDict() { G__remove_setup_func("myDict"); }
};
G__cpp_setup_initmyDict G__cpp_setup_initializermyDict;

